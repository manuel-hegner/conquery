dist: xenial

language: java
os:
  - linux

jdk:
  - openjdk11

before_install: mvn initialize -P setVersion

jobs:
  include:
    - stage: "Tests"
      
    #test frontend
      name: "Frontend Tests"
      install: skip
      script:
        - mvn -B -V install -N
        - mvn -B -V install -pl frontend-resources
        - mvn -B -V install -pl backend -DskipTests
        - mvn -B -V package -pl executable 

    #build backend and run all non-integration tests
    - name: "Unit Tests"
      install:
        - cd backend
        - mvn -B -V -T 1C install -DskipTests
      script: mvn -B test -DexcludedGroups="INTEGRATION_PROGRAMMATIC, INTEGRATION_JSON"

    #build and test only INTEGRATION_PROGRAMMATIC
    - name: "Programmatic Integration Tests"
      install:
        - cd backend
        - mvn -B -V -T 1C install -DskipTests
      script: mvn -B test -Dgroups="INTEGRATION_PROGRAMMATIC"

    #build and test only INTEGRATION_JSONs
    - name: "Integration Tests: Authentication Tests"
      env:
        - CONQUERY_TEST_DIRECTORY=tests/auth
      install:
        - cd backend
        - mvn -B -V -T 1C install -DskipTests
      script: mvn -B test -Dgroups="INTEGRATION_JSON"

    - name: "Integration Tests: Filter Tests"
      env:
        - CONQUERY_TEST_DIRECTORY=tests/filter
      install:
        - cd backend
        - mvn -B -V -T 1C install -DskipTests
      script: mvn -B test -Dgroups="INTEGRATION_JSON"

    - name: "Integration Tests: Query Tests"
      env:
        - CONQUERY_TEST_DIRECTORY=tests/query
      install:
        - cd backend
        - mvn -B -V -T 1C install -DskipTests
      script: mvn -B test -Dgroups="INTEGRATION_JSON"

    - name: "Integration Tests: Aggregator Tests"
      env:
        - CONQUERY_TEST_DIRECTORY=tests/aggregator
      install:
        - cd backend
        - mvn -B -V -T 1C install -DskipTests
      script: mvn -B test -Dgroups="INTEGRATION_JSON"
  

    #Deploy
    - stage: "Deploy Develop to Heroku"
      if: branch = develop AND type = push
      before_install: mvn initialize -P setVersion
      install: 
        - mvn -B -V -T 1C install -DskipTests
        - curl https://cli-assets.heroku.com/install-ubuntu.sh | sh
      script: bash frontend/scripts/deploy-heroku-docker.sh conquery-dev

    - stage: "Deploy Master to Heroku"
      if: branch = master AND type = push
      install: 
        - mvn -B -V -T 1C install -DskipTests
        - curl https://cli-assets.heroku.com/install-ubuntu.sh | sh
      script: bash frontend/scripts/deploy-heroku-docker.sh conquery





    - stage: "Releases"
      name: "Prerelease"
      if: type = push AND tag IS present AND tag =~ ^v\d+\.\d+(\.\d+)?-.*$
      install: mvn -B -V -T 1C package -DskipTests
      script: skip
      deploy:
        provider: releases
        api_key: $GITHUB_OAUTH_TOKEN
        tag_name: $TRAVIS_TAG
        target_commitish: $TRAVIS_COMMIT
        file:
          - backend/target/backend-$TAG_VERSION.jar
          - executable/target/executable-$TAG_VERSION.jar
        skip_cleanup: true
        draft: false
        prerelease: true
        on:
          all_branches: true

    - name: "Release"
      if: type = push AND tag IS present AND tag =~ ^v\d+\.\d+(\.\d+)?$
      install: mvn -B -V -T 1C package -DskipTests
      script: skip
      deploy:
        provider: releases
        api_key: $GITHUB_OAUTH_TOKEN
        tag_name: $TRAVIS_TAG
        target_commitish: $TRAVIS_COMMIT
        file:
          - backend/target/backend-$TRAVIS_TAG.jar
          - executable/target/executable-$TRAVIS_TAG.jar
        skip_cleanup: true
        draft: false
        prerelease: false
        on:
          all_branches: true

#remove the installed maven jars before caching
before_cache:
  - rm -f -r $HOME/.m2/repository/com/bakdata/conquery/
cache:
  yarn: true
  directories:
    - "$HOME/.cache"
    - "$HOME/.m2"